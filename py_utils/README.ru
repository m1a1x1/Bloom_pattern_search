В данной папке находяься две python-утилиты:

  - bloom_model.py - референсная модель поиска строк по алгоритму, 
                     идентичному тому, что используется в FPGA.

  - util_for_sim.py - утилита для подготовки файла для записи строк в
                      FPGA.

Остальные файлы - вспомогательные утилиты (парсинг параметров для
                  утилит, расчет CRC32).

Подробное описание утилит:

 bloom_model.py 
  
   Входные параметры и их ключи:

     Примечание: Все параметры должны быть указаны ОДНОВРЕМННО.

     -s <FILE_NAME> - Обязательный параметр. Указывает файл со строчками (паттернами), по которым будет
                      произведено поиск (см. example_strings).

     -d <FILE_NAME> - Обязательный параметр. Указывает файл со строками, в кторых будут
                      будут искаться паттерны.

     -o <FILE_NAME> - Необязательный параметр. Указывает файл, куда
                      будут записаны только те строки, в которых не был найден паттерн.
                      Если параметр не указан, этот файл будет
                      называться filtered_data.
             
     -h             - help.

   Алгоритм работы:

     1) Сделать файл с паттернами для поиска (по примеру
        example_strings)

     2) Сделать файл с данными, в которых будет осуществлен поиск
        паттернов.

     3) Запустить утилиту (используя свои имена файлов с паттернами и
        данными):

          python bloom_model.py -s example_strings -d example_data -o example_filt_data

     4) Прогресс работы будет выводится на экран, как количество
        строк, которые осталось проверить. По завершению работы будет
        выведен результат: в скольки строках на самом деле были
        паттерны и в скольки строках bloom-фильтр нашел паттерны.

     5) Также по завершению работы будет создан файл example_filt_data
        со строками без паттернов.
        
 util_for_sim.py

   Входные параметры и их ключи:

     Примечание: 1) За один вызов утилиты можно передать только ОДИН
                    параметр.
                 2) Изменить имена .json файла и файла настоек для
                    записи строк в FPGA можно открыв текстовым редактором
                    util_for_sim.py и присвоить переменным SIM_FNAME и
                    PM_STATE_FNAME нужные названия файлов.

     -i             - Обязательный параметр при первом использовании. При вызове
                      util_for_sim.py -i происходит инициализация модуля, создаются
                      необходимые для работы файлы.

     -a <STRING>    - Добавить одну строку STRING как паттерн для поиска.
                      По завершению работы утилиты в файл
                      example_settings будет добавлена необходимая
                      строчка.

     -A <FILE_NAME> - Добавить все строчки, из файла FILE_NAME как
                      паттерны для поиска.

     -r <STRING>    - Удалить строку STRING из списка паттернов для
                      поиска, при этом в example_settings добавится соответствующая
                      строка (то есть в FPGA эта строка сначала запишется а потом
                      удалится).

     -S             - Вывести информацию, о том, какие строки были
                      записаны (в порядке их длины) и сколько бит
                      в FPGA занято, для записи всех строк.
  
   Алгоритм работы:
   
     1) Инициализировать модуль:

          python util_for_sim.py -i

     2) Добавить нужную строку в список паттернов для поиска:
 
          python util_for_sim.py -a google

        Или добавить строки из файла:

          python util_for_sim.py -A example_strings

     3) По завершению добавления всех строк, создастся файл
        example_settings. Этот файл необходимо скопировать в
        директорию ../testbench/

